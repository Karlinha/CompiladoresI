#include<stdio.h>
#include<stdlib.h>
#include "sintatico.h"
#include "../Analisador_Léxico/AnalisadorLexico.h"
#define INTMAX 35

Token *token;
FILE *arq;
int nao_terminais[INTMAX];
int terminais[INTMAX];

/*
A chamada para a principal função, a partir dela uma variavel global token que é auxiliar, será alocada e ficará
recebendo os tokens analisados pelo Lexico,eles serão atualizados conforme o sintatico for solicitando.
*/
void analisadorSintatico() {
    nao_terminais[INTMAX] = {0};
    terminais[INTMAX];
    arq = fopen("../tree_tex/arvore.tex", "w");
    if(arq == NULL)
	puts("Falha ao abrir arvore.tex");
    iniciar_tex();
    token = (Token*) malloc(sizeof(Token));
    token = proximo_token();
    programa();
    encerrartex();
    fclose(arq);

}

void iniciar_tex() {
    fprintf(arq,"%s","\documentstyle[treetex]{article}"); 
    fprintf(arq,"%s", "\begin{document}"); 
    fprintf(arq,"%s", "\begin{center}"); 
    fprintf(arq,"%s", "\begin{tree}{arvoreDeDerivaçao}"); 
}

void encerrartex() {
    fprintf(arq,"%s", "\end{tree}"); 
    fprintf(arq,"%s", "\end{center}"); 
    fprintf(arq,"%s", "\end{document}"); 
}

int corpo() {
    if(token != NULL) { 
        if(token->categoria == tk_open_key) {
	    fprintf(arq,"treenode{open_key%d}{corpo%d}{{}", terminais[1]++, nao_terminais[0]); 
            token = proximo_token();
            fprintf(arq,"treenode{cmd%d}{corpo%d}{cmd}", terminais[1]++, nao_terminais[0]);
            if(cmd()) {
                if(token->categoria == tk_close_key) {
	            fprintf(arq,"treenode{close_key%d}{corpo%d}{}}", terminais[2]++, nao_terminais[0]++); 	
                    token = proximo_token();
                    return 1;
                }
                puts("ERRO FALTA }");
                exit(EXIT_FAILURE);
            }
            exit(EXIT_FAILURE);
        }
        puts("ERRO FALTA {");
        exit(EXIT_FAILURE);
    }
    exit(EXIT_FAILURE);
}


int programa() {
    fprintf(arq,"\rootnode{Programa}"); 
    fprintf(arq,"\treenode{termo_program}{Programa}{termo_program}"); 
    if(termo_program()) {
        if(token->categoria == tk_kw_main) {
	     fprintf(arq,"\treenode{main}{Programa}{main}"); 
             token = proximo_token();
             fprintf(arq,"\treenode{corpo%d}{Programa}{corpo}", nao_terminais[0]++);
             if(corpo()) {	
                puts("Executado com Sucesso!");
                return 1;
             }
	     exit(EXIT_FAILURE);
         }
         exit(EXIT_FAILURE);
    }
    exit(EXIT_FAILURE);
}


int termo_program() {
    fprintf(arq,"\treenode{list_func%d}{termo_program}{list_func}", nao_terminais[3]++); 
    if(list_func()) {	
        return 1;
    }   
    fprintf(arq,"\treenode{vazio}{termo_program}{Vazio}", terminais[29]++);    
    //pensar como tratar esse erro dele escrever as duas producoes 
    return 1;
}

int list_func() {
        if(token != NULL){
            if(token->categoria == tk_kw_func) {
                fprintf(arq,"\treenode{func%d}{list_func%d}{function}", terminais[3]++, nao_terminais[3]);  
                token = proximo_token();
                if(token->categoria == tk_id) {
                    fprintf(arq,"\treenode{id%d}{list_func%d}{id}", terminais[4]++, nao_terminais[3]);  
                    token = proximo_token();
                    if(token->categoria == tk_open_par) {
		        fprintf(arq,"\treenode{open_par%d}{list_func%d}{(}", terminais[5]++, nao_terminais[3]);  
                        token = proximo_token();
 			fprintf(arq,"\treenode{list_param%d}{list_func%d}{list_param}", nao_terminais[4]++, nao_terminais[3]);
                        if(list_param()) {
                            if(token->categoria == tk_close_par) {
 				fprintf(arq,"\treenode{close_par%d}{list_func%d}{)}", terminais[6]++, nao_terminais[3]);  
                                token = proximo_token();
                                if(token->categoria == tk_open_key) {
				    fprintf(arq,"\treenode{open_key%d}{list_func%d}{{}", terminais[1]++, nao_terminais[3]); 
                                    token = proximo_token();
 				    fprintf(arq,"\treenode{cmd%d}{list_func%d}{cmd}", nao_terminais[6]++, nao_terminais[3]); 
                                    if(cmd()){
                                        if(token->categoria == tk_kw_return) {
  					    fprintf(arq,"\treenode{return%d}{list_func%d}{return}", terminais[7]++, nao_terminais[3]); 
                                            token = proximo_token();
		   			    fprintf(arq,"\treenode{exp_bool%d}{list_func%d}{exp_bool}", nao_terminais[15]++, nao_terminais[3]); 
                                            if(exp_bool()) {
                                                if(token->categoria == tk_semicolon) {
			 			    fprintf(arq,"\treenode{semicolon%d}{list_func%d}{;}", terminais[14]++, nao_terminais[3]);
                                                    token = proximo_token();
                                                    if(token->categoria == tk_close_key) {
							fprintf(arq,"\treenode{close_key%d}{list_func%d}{}}", terminais[2]++, nao_terminais[3]);
                                                        token = proximo_token();
							fprintf(arq,"\treenode{list_func%d}{list_func%d}{list_func}", nao_terminais[3]+1, nao_terminais[3]);
                                                        if(list_func()){
 							    nao_terminais[3]++;
                                                            return 1;
                                                        }
                                                        exit(EXIT_FAILURE);
                                                    }
                                                    puts("ERRO - Falta }");
                                                    exit(EXIT_FAILURE);
                                                }
                                                puts("ERRO - Falta ;3");
                                                exit(EXIT_FAILURE);
                                            }
                                            exit(EXIT_FAILURE);
                                        }
                                        exit(EXIT_FAILURE);
                                    }
                                    exit(EXIT_FAILURE);
                                }
                                puts("ERRO - Falta {");
                                exit(EXIT_FAILURE);
                            }
                            puts("ERRO - Falta )");
                            exit(EXIT_FAILURE);
                        }
                        exit(EXIT_FAILURE);
                    }
                    puts("ERRO - Falta (");
                    exit(EXIT_FAILURE);
                }
                exit(EXIT_FAILURE);
            }
            fprintf(arq,"\treenode{vazio%d}{list_func%d}{vazio}", terminais[29]++, nao_terminais[3]++);
	    return 1;
        }
	exit(EXIT_FAILURE);
        
}


int list_param() {
    fprintf(arq,"\treenode{type%d}{list_param%d}{type}", nao_terminais[9]++, nao_terminais[4]);
    if(type()) {
        if(token->categoria == tk_id) {
 	    fprintf(arq,"\treenode{id%d}{list_param%d}{id}", terminais[4]++, nao_terminais[4]);
            token = proximo_token();
	    fprintf(arq,"\treenode{param%d}{list_param%d}{param}", nao_terminais[5]++, nao_terminais[4]);
            if(param()) {
		nao_terminais[4]++;
                return 1;
            }
            exit(EXIT_FAILURE);
        }
        exit(EXIT_FAILURE);
    }
    exit(EXIT_FAILURE);
}


int param() {
    if(token != NULL){
        if(token->categoria == tk_comma) {
	    fprintf(arq,"\treenode{comma%d}{param%d}{,}", terminais[8]++, nao_terminais[5]);
            token = proximo_token();
	    fprintf(arq,"\treenode{list_param%d}{param%d}{list_param}", nao_terminais[4]++, nao_terminais[5]);
            if(list_param()) {
		nao_terminais[5]++;
                return 1;
            }
            exit(EXIT_FAILURE);
        }
	exit(EXIT_FAILURE);
    }
    fprintf(arq,"\treenode{vazio%d}{param%d}{vazio}", terminais[29]++, nao_terminais[5]++);
}


int cmd() {
   fprintf(arq,"\treenode{var_dec%d}{cmd%d}{var_dec}", nao_terminais[4]++, nao_terminais[6]);
   if(var_dec()) {	
	fprintf(arq,"\treenode{cmd%d}{cmd%d}{cmd}", nao_terminais[6]+1, nao_terminais[6]);
        if(cmd()) {
	    nao_terminais[6]++;
            return 1;
	}
        exit(EXIT_FAILURE);
    }

        else if(cond()) {
        if(cmd())
            return 1;
        return 0;
    }
        else if(iter()) {
        if(cmd())
            return 1;
        return 0;
    }
        else if(atrib()){
        if(token->categoria == tk_semicolon) {
            token = proximo_token();
            if(cmd())
                return 1;
            return 0;
        }
        puts("ERRO - FALTA ;");
        exit(EXIT_FAILURE);
    }
        else if(ch_func()) {
        if(cmd())
            return 1;
        return 0;
    }
    return 2;
}

/*
int ch_func() {
    if(saida())
        return 1;
    else if(entrada())
        return 1;
    else if(concaternar())
        return 1;
    return 0;
}

int saida() {
    if(token->categoria == tk_kw_output) {
        token = proximo_token();
        if(token->categoria == tk_open_par) {
            token = proximo_token();
            if(token->categoria == tk_const_lit) {
                token = proximo_token();
                return 1;
            }
            else if(types())
                return 1;
            return 0;
        }
        return 0;
    }
    return 0;
}*/

// contador6
int var_dec()
{
    fprintf(arq,"\treenode{type%d}{var_dec%d}{type}", nao_terminais[9]++, nao_terminais[7]);
    if(type()) {
        if(token->categoria == tk_id) {
	    fprintf(arq,"\treenode{id%d}{var_dec%d}{id}", terminais[4]++, nao_terminais[7]);
            token = proximo_token();
            fprintf(arq,"\treenode{termo_var_dec%d}{var_dec%d}{termo_var_dec}", nao_terminais[8]++, nao_terminais[7]);
            if(termo_var_dec()) {
                if(token->categoria == tk_semicolon) {
		    fprintf(arq,"\treenode{semicolon%d}{var_dec%d}{;}", terminais[14]++, nao_terminais[7]++);
                    token = proximo_token();
                    return 1;
                }
                 puts("ERRO FALTA ;");
                 exit(EXIT_FAILURE);
            }
            exit(EXIT_FAILURE);
        }
        exit(EXIT_FAILURE);
    }
    exit(EXIT_FAILURE);
}


int termo_var_dec()
{
    if(token != NULL){
        if(token->categoria == tk_open_bra) {
	    fprintf(arq,"\treenode{open_bra%d}{termo_var_dec%d}{[}", terminais[12]++, nao_terminais[8]);
            token = proximo_token();
            if(token->categoria == tk_const_int) {
		fprintf(arq,"\treenode{const_int%d}{termo_var_dec%d}{cte_int}", terminais[30]++, nao_terminais[8]);
                token = proximo_token();
                if(token->categoria == tk_close_bra) {
		    fprintf(arq,"\treenode{close_bra%d}{termo_var_dec%d}{]}", terminais[13]++, nao_terminais[8]++);
                    return 1;
		}
                exit(EXIT_FAILURE);
            }
            exit(EXIT_FAILURE);
        }
        fprintf(arq,"\treenode{vazio%d}{termo_var_dec%d}{vazio}", terminais[29]++, nao_terminais[8]++);
	return 1;
    }
    exit(EXIT_FAILURE);

}


int type() {

    if(token != NULL){
        if(token->categoria == tk_kw_int || token->categoria == tk_kw_float || token->categoria == tk_kw_char) {
	    fprintf(arq,"\treenode{tipo%d}{type%d}{%s}", terminais[32]++, nao_terminais[9]++, token->valor);
            token = proximo_token();
            return 1;
        }
	exit(EXIT_FAILURE);
    }
    exit(EXIT_FAILURE);
}

int cond() {

    if(token != NULL){
        if(token->categoria == tk_kw_if) {
            token = proximo_token();
            if(token->categoria == tk_open_par) {
                token = proximo_token();
                if(exp_bool()) {
                    if(token->categoria == tk_close_par) {
                        token = proximo_token();
                        if(corpo()){
                            if(termo_cond())
                                return 1;
                            return 0;
                        }
                        return 0;
                    }
                    puts("ERRO - Falta )");
                    exit(EXIT_FAILURE);
                }
                return 0;
            }
            puts("ERRO - Falta (");
            exit(EXIT_FAILURE);
        }
    }
    return 0;
}

int termo_cond() {

    if(token != NULL){
        if(token->categoria == tk_kw_else) {
            token = proximo_token();
            if(fator_cond())
                return 1;
            return 0;
        }
        return 2;
    }
}

int fator_cond(){

    if(token != NULL){
        if(corpo())
            return 1;
        else if(cond())
            return 1;
        return 0;
    }
    return 0;
}

int iter() {

    if(token != NULL){
        if(token->categoria == tk_kw_for) {
            token = proximo_token();
            if(token->categoria == tk_open_par) {
                token = proximo_token();
                if(atrib()) {
                    if(token->categoria == tk_semicolon) {
                        token = proximo_token();
                        if(exp_bool()) {
                            if(token->categoria == tk_semicolon) {
                                token = proximo_token();
                                if(atrib()) {
                                    if(token->categoria == tk_close_par) {
                                        token = proximo_token();
                                        if(corpo())
                                            return 1;
                                        return 0;
                                    }
                                    puts("ERRO - Falta )");
                                    exit(EXIT_FAILURE);
                                }
                                return 0;
                            }
                            puts("ERRO - Falta ;");
                            exit(EXIT_FAILURE);
                        }
                        return 0;
                    }
                    puts("ERRO - Falta ;");
                    exit(EXIT_FAILURE);
                }
                return 0;
            }
            puts("ERRO - Falta (");
            exit(EXIT_FAILURE);
        }

        else if(token->categoria == tk_kw_while) {
            token = proximo_token();
            if(token->categoria == tk_open_par) {
                token = proximo_token();
                if(exp_bool()) {
                    if(token->categoria == tk_close_par) {
                        token = proximo_token();
                        if(corpo())
                            return 1;
                        return 0;
                    }
                    puts("ERRO - Falta )");
                    exit(EXIT_FAILURE);
                }
                return 0;
            }
            puts("ERRO - Falta (");
            exit(EXIT_FAILURE);
        }
    }
    return 0;
}

int atrib() {

    if(token != NULL)
    {
        if(token->categoria == tk_id) {
            token = proximo_token();
            if(token->categoria == tk_op_atrib) {
                token = proximo_token();
                if(exp())
                    return 1;
                return 0;
            }
            return 0;
        }
    }
    return 0;
}

int exp() {

    if(exp_bool())
        return 1;
    else if(exp_arit())
        return 1;
    return 0;
}

int exp_bool() {
    if(termo_bool()){
        if(A())
            return 1;
        return 0;
    }
    return 0;
}

int A() {
    if(token != NULL){
         if(token->categoria == tk_kw_or) {
            token = proximo_token();
            if(termo_bool()) {
                if(B())
                    return 1;
                return 0;
            }
            return 0;
         }
         return 2;
    }
     return 0;
}

int termo_bool() {
    if(fator_bool()){
        if(B())
            return 1;
        return 0;
    }
    return 0;
}

int B() {
    if(token != NULL)
    {
        if(token->categoria == tk_kw_and) {
            token = proximo_token();
            if(fator_bool()){
                if(B())
                    return 1;
                return 0;
            }
            return 0;
        }
        return 2;
    }
    return 0;
}

int fator_bool() {
    if(token != NULL){
        if(token->categoria == tk_kw_not) {
            token = proximo_token();
            if(fator_bool())
                return 1;
            return 0;
        }

    else if(exp_rel())
        return 1;
    }
    return 0;
}

int exp_rel() {
    if(exp_arit()) {
        if(C())
            return 1;
        return 0;
    }
    return 0;
}

int C()
{
    if(token != NULL)
    {
        if(token->categoria == tk_rel_op) {
            token = proximo_token();
            if(exp_arit())
                return 1;
            return 0;
        }
    }
    return 2;
}

int exp_arit() {
    if(termo_arit()){
         if(D())
            return 1;
         return 0;
    }
    return 0;
}

int D() {
    if(token != NULL){
        if(token->categoria == tk_op_add) {
            token = proximo_token();
            if(termo_arit()) {
                if(D())
                    return 1;
                return 0;
            }
            return 0;
        }
        else if(token->categoria == tk_op_sub) {
            token = proximo_token();
            if(termo_arit()) {
                if(D())
                    return 1;
                return 0;
            }
            return 0;
        }
        return 2;
    }
    return 0;
}

int termo_arit() {
    if(fator_arit()) {
        if(E())
            return 1;
        return 0;
    }
    return 0;
}

int E() {
    if(token != NULL){
        if(token->categoria == tk_op_mul){
            token = proximo_token();
            if(fator_arit()){
                if(E())
                    return 1;
            }
            return 0;
        }
        else if(token->categoria == tk_op_div) {
            token = proximo_token();
            if(fator_arit()){
                if(E())
                    return 1;
            }
            return 0;
        }
        return 2;
    }
    return 0;
}

int fator_arit() {

    if(token != NULL){
        if(token->categoria == tk_const_int || token->categoria == tk_const_float || token->categoria == tk_id){
            token = proximo_token();
            return 1;
        }
    }
    return 0;
}


